{"version":3,"sources":["Components/Settings/Settings.module.css","Components/Tablo/Tablo.tsx","Components/Button/Button.tsx","Components/ButtonGroup/ButtonsGroup.tsx","Components/Input/InputNumber.tsx","Components/Settings/Settings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Tablo","props","className","state","maxValue","error","Button","disabled","title","onClick","mainClass","s","button","join","Buttons","isChange","inc","startValue","reset","InputNumber","value","onChange","setValue","minValue","type","min","e","currentTarget","Settings","setCount","setError","setMaxValue","setStartValue","setIsChange","useState","minValueLocal","setMinValueLocal","maxValueLocal","setMaxValueLocal","isError","useCallback","useEffect","onChangeHandler","input","App","count","ButtonsGroup","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.57c75422.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Settings_input__34MNh\"};","import React from 'react';\n\ntype PropsType = {\n  state: number\n  maxValue: number\n  error: string\n}\n\nfunction Tablo(props: PropsType) {\n\n\n\n\n  return (\n    \n        <div className={props.state===props.maxValue ? \"limit\" : \"\"} >\n        <h1>{props.error ? \"Некорректное значение\" : props.state}</h1>\n       \n          </div>\n  \n  );\n}\n\nexport default Tablo;\n","import React from 'react';\nimport s from './Button.module.css'\n\n\ntype PropsType = {\n  onClick?: () => void\n  disabled?: boolean\n  title: string\n}\n\nfunction Button(props: PropsType) {\n  const {disabled,title,onClick}=props\n\n  const onClickHandler = () => {\n    onClick && onClick()\n\n\n  }\n\n  let mainClass = [s.button]\n\n\n  return (\n\n    <button className={mainClass.join(\" \")} \n            onClick={onClickHandler}\n            disabled={disabled} >\n      {\n        title\n      }\n    </button>\n\n    //<button disabled={props.state===5} onClick={() => {props.inc()}} className='inc' >inc</button> \n    //<button disabled={props.state===0} onClick={() => {props.reset()}} className='reset'  >reset</button>\n\n\n  );\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from '../Button/Button';\n\n\n\ntype PropsType = {\n  state: number\n  inc: () => void\n  reset: () => void\n  maxValue: number\n  startValue: number\n  isChange: boolean\n}\n\nfunction Buttons(props: PropsType) {\n  return (\n    \n    <div>\n      <Button title={\"inc\"} disabled={props.state===props.maxValue || props.isChange} onClick={() => {props.inc()}} />\n      <Button title={\"reset\"} disabled={props.state===props.startValue || props.isChange} onClick={() => {props.reset()}} />\n    </div>\n\n \n  \n  );\n}\n\nexport default Buttons;\n","import React, { ChangeEvent } from 'react';\n\ntype PropsType = {\n  //setMaxValue: (value: number) => void\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void\n  title: string\n  value: number\n  setValue?: (value: number) => void\n  minValue?: number\n}\n\n\nfunction InputNumber(props: PropsType) {\n  const { title, value, onChange, setValue, minValue = -1 } = props\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    onChange && onChange(e);\n    setValue && setValue(+e.currentTarget.value);\n  }\n  return (\n    <>\n      <label>\n        <span>{title}</span>\n        <input type=\"number\"\n          min={minValue}\n          value={value}\n          onChange={onChangeHandler} />\n      </label>\n    </>\n  );\n}\n\nexport default InputNumber;\n","import React, { ChangeEvent, useState, useEffect, useCallback } from 'react';\nimport InputNumber from '../Input/InputNumber';\nimport s from './Settings.module.css'\nimport Button from '../Button/Button';\n\ntype PropsType = {\n  setMaxValue: (value: number) => void\n  error: string\n  setError: (error: string) => void\n  setStartValue: (value: number) => void\n  setCount: (value: number) => void\n  maxValue: number\n  setIsChange: (isChange: boolean) => void\n}\n\n\nfunction Settings(props: PropsType) {\n  const {error,maxValue,setCount,setError,setMaxValue,setStartValue,setIsChange}=props\n  let [minValueLocal, setMinValueLocal] = useState(0);\n  let [maxValueLocal, setMaxValueLocal] = useState(maxValue);\n  \n  const isError = useCallback( () => {\n    if(minValueLocal<0) {\n      setError(\"Min value не должно быть меньше 0\")\n    } else if (minValueLocal===maxValueLocal) {\n      setError(\"Min value и Max value не должны быть равны\")\n    } else if (minValueLocal > maxValueLocal) {\n      setError(\"Min value не должен быть больше Max value\")\n    } else {\n      setError(\"\")\n    }\n  }, [minValueLocal, maxValueLocal, setError])\n\n  useEffect(() => {\n    isError()\n  }, [minValueLocal, maxValueLocal, isError])\n\n  const onClickHandler = () => {\n    setMaxValue(maxValueLocal)\n    setStartValue(minValueLocal)\n    setCount(minValueLocal)\n    setIsChange(false)\n  }\n\n  const onChangeHandler = () => {\n    setIsChange(true) \n  }\n\n  let mainClass = [s.input]\n\n  return (\n\n    <div className={mainClass.join(\" \")}>\n      <InputNumber title={\"Max value\"} value={maxValueLocal} setValue={setMaxValueLocal} onChange={onChangeHandler} />\n      <InputNumber title={\"Min value\"} value={minValueLocal} setValue={setMinValueLocal} onChange={onChangeHandler} />\n      <span>{error ? error : null}</span>\n      <Button title={\"Set\"} disabled={error!==\"\"} onClick={onClickHandler} />\n    </div>\n\n  );\n}\n\nexport default Settings;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Tablo from './Components/Tablo/Tablo';\nimport ButtonsGroup from './Components/ButtonGroup/ButtonsGroup';\nimport Settings from './Components/Settings/Settings';\n\nfunction App() {\n\n  \n  let [maxValue, setMaxValue] = useState(1);\n  let [startValue, setStartValue] = useState(0);\n  let [count, setCount] = useState(startValue);\n  let [error, setError] = useState(\"\");\n  let [isChange, setIsChange] = useState(false)\n\n  function inc () {\n    \n    if (count<maxValue) {\n    setCount(count+1)\n    }\n  }\n\n  function reset () {\n    setCount(startValue)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Settings setMaxValue={setMaxValue}\n                  setStartValue={setStartValue}\n                  setCount={setCount}\n                  error={error}\n                  setError={setError}\n                  maxValue={maxValue}\n                  setIsChange={setIsChange} />\n        <Tablo state={count}\n                maxValue={maxValue}\n                error={error} />\n        <ButtonsGroup \n                state={count}\n                inc={inc}\n                reset={reset}\n                maxValue={maxValue}\n                startValue={startValue}\n                isChange={isChange} />\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}